from numpy.linalg.linalg import LinAlgError

from constants import b, E, L, P_y_4
from examples.lagrangian_problems.mechanical_project.constants import h_ini
import numpy as np


coefs = np.array([
    [
        (12.*E / L ** 3),
        (6.*E / L ** 2),
        (-12.*E / L ** 3),
        (6.*E / L ** 2),
        0.0,
        0.0
    ],
    [
        (6.*E / L ** 2),
        (4.*E / L),
        (-6.*E / L ** 2),
        (2.*E / L),
        0.0,
        0.0
    ],
    [
        (-12.*E / L ** 3),
        (-6.*E / L ** 2),
        (12.*E / L ** 3),
        (6.*E / L ** 2),
        (-12.*E / L ** 3),
        (6.*E / L ** 2)
    ],
    [
        (6.*E / L ** 2),
        (2.*E / L),
        (6.*E / L ** 2),
        (4.*E / L),
        (-6.*E / L ** 2),
        (2.*E / L)
    ],
    [
        0.0,
        0.0,
        (-12.*E / L ** 3),
        (-6.*E / L ** 2),
        (12.*E / L ** 3),
        (-6.*E / L ** 2)
    ],
    [
        0.0,
        0.0,
        (6.*E / L ** 2),
        (2.*E / L),
        (-6.*E / L ** 2),
        (4.*E / L)
    ]
])

def u(x):
    h1, h2, h3 = x[0], x[1], x[2]

    I_1 = b * h1 ** 3.0 / 12.0
    I_2 = b * h2 ** 3.0 / 12.0
    I_3 = b * h3 ** 3.0 / 12.0
    I = np.array([
        [
            (I_1 + I_2),
            (I_2 - I_1),
            I_2,
            I_2,
            0.0,
            0.0
        ],
        [
            (I_2 - I_1),
            (I_1 + I_2),
            I_2,
            I_2,
            0.0,
            0.0
        ],
        [
            I_2,
            I_2,
            (I_2 + I_3),
            (I_3 - I_2),
            I_3,
            I_3
        ],
        [
            I_2,
            I_2,
            (I_3 - I_2),
            (I_2 + I_3),
            I_3,
            I_3
        ],
        [
            0.0,
            0.0,
            I_3,
            I_3,
            I_3,
            I_3
        ],
        [
            0.0,
            0.0,
            I_3,
            I_3,
            I_3,
            I_3
        ]
    ])

    K = coefs * I
    F = np.array([
        0.0,
        0.0,
        0.0,
        0.0,
        P_y_4,
        0.0,
    ])
    u = np.linalg.solve(K, F)
    return u


def du_dh1(x):
    h1, h2, h3 = x[0], x[1], x[2]
    dI_1_dh1 = 3.0 * b * h1 ** 2.0 / 12.0
    K = coefs * np.array([
        [1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
        [1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    ]) * dI_1_dh1
    F = np.array([
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ])
    u = np.linalg.solve(K[0:2, 0:2], F[0:2])
    return u


def du_dh2(x):
    h1, h2, h3 = x[0], x[1], x[2]
    dI_2_dh2 = 3.0 * b * h2 ** 2.0 / 12.0
    K = coefs * np.array([
        [1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
        [1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
        [1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
        [1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    ]) * dI_2_dh2
    F = np.array([
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ])
    u = np.linalg.solve(K, F)
    return u


def du_dh3(x):
    h1, h2, h3 = x[0], x[1], x[2]
    dI_3_dh3 = 3.0 * b * h3 ** 2.0 / 12.0
    K = coefs * np.array([
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
        [0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
        [0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
        [0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
    ]) * dI_3_dh3
    F = np.array([
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ])
    u = np.linalg.solve(K, F)
    return u
